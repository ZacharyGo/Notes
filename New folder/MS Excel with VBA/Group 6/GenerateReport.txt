    Dim NotStarted() As Integer
    Dim NotStartedDelayed() As Integer
    Dim InProgress() As Integer
    Dim Overdue() As Integer
    Dim Completed() As Integer
    Dim CompletedLate() As Integer
'    Private Type ErrRecord
'        SerialNo As Long
'        FileName As String
'        ErrorType As String
'        ErrorCell As String
'        ErrorCellValue As Variant
'        MyArray() As Integer
'    End Type
    Private Type ReportType
        Name As String
        SheetName As String
        Tasks() As Integer
    End Type

Sub GenerateReports()
    SegregateTaskByStatus
    InitializeReports
    'CreateReports(ReportName)
End Sub
Sub InitializeReports()
    Dim Reports(5) As ReportType
    With Reports(0)
        .Name = "NotStarted"
        .SheetName = "Not Started"
        .Tasks() = NotStarted
    End With
    With Reports(1)
        .Name = "NotStartedDelayed"
        .SheetName = "Not Started (Delayed)"
        .Tasks() = NotStartedDelayed
    End With
    With Reports(2)
        .Name = "InProgress"
        .SheetName = "In Progress"
        .Tasks() = InProgress
    End With
    With Reports(3)
        .Name = "Overdue"
        .SheetName = "Overdue"
        .Tasks() = Overdue
    End With
    With Reports(4)
        .Name = "Completed"
        .SheetName = "Completed"
        .Tasks() = Completed
    End With
    With Reports(5)
        .Name = "CompletedLate"
        .SheetName = "Completed (Late)"
        .Tasks() = CompletedLate
    End With
    
    Worksheets("Task List").Activate
    
    For i = 0 To 5
        With Reports(i)
            ' Delete Old Sheet for this Report
            If Evaluate("ISREF('" & .SheetName & "'!A1)") Then
                Application.DisplayAlerts = False
                Sheets(.SheetName).Delete
                Application.DisplayAlerts = True
            End If
            ' Add Report Sheet only if there are task belonging to this status
            If (Not Not .Tasks) <> 0 Then
                'Sheets.Add After:=Worksheets("Task List").Activate
                Sheets.Add After:=ActiveSheet
                Sheets(ActiveSheet.Name).Name = .SheetName
                AddHeading (.SheetName)
                For Each Task In .Tasks
                    If (TaskList = "") Then
                        TaskList = Task
                    Else
                        TaskList = TaskList & ", " & Task
                    End If
                Next
            End If
        End With
    Next
    'Reports = Array("
End Sub

Sub AddHeading(HeaderName As String)
    Range("A1:F1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.Merge
    Range("A1:F1").Select
    ActiveCell.FormulaR1C1 = HeaderName
    Range("A1:F1").Select
    With Selection.Font
        .Name = "Calibri"
        .Size = 48
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    Range("A2").Select
    ActiveCell.FormulaR1C1 = "Task ID"
    Range("B2").FormulaR1C1 = "Task Description"
    Range("C2").FormulaR1C1 = "Expected Start Date"
    Range("D2").FormulaR1C1 = "Expected Complete Date"
    Range("E2").FormulaR1C1 = "Actual Start Date"
    Range("F2").FormulaR1C1 = "Actual Complete Date"
    Range("F2").Select
    Range(Selection, Selection.End(xlToLeft)).Select
    Columns("A:F").Select
    Range("F1").Activate
    Columns("A:F").EntireColumn.AutoFit
    Range("A2:F2").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 4.99893185216834E-02
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    Selection.Font.Bold = True
End Sub

Sub SegregateTaskByStatus()
    Dim Rows As Integer
    Worksheets("Task List").Activate
    Range("A2").Select
    Range(Selection, Selection.End(xlDown)).Select
    
    Rows = Selection.Rows.Count
    
    
    For CurrentRow = 2 To Rows + 1
        Select Case IdentifyTaskStatus(Range("C" & CurrentRow), Range("D" & CurrentRow), Range("E" & CurrentRow), Range("F" & CurrentRow))
            Case "NotStarted"
                If (Not Not NotStarted) = 0 Then
                    ReDim NotStarted(0)
                Else
                    ReDim Preserve NotStarted(WorksheetFunction.CountA(NotStarted))
                End If
                NotStarted(UBound(NotStarted)) = Range("A" & CurrentRow).Value
            Case "NotStartedDelayed"
                If (Not Not NotStartedDelayed) = 0 Then
                    ReDim NotStartedDelayed(0)
                Else
                    ReDim Preserve NotStartedDelayed(WorksheetFunction.CountA(NotStartedDelayed))
                End If
                NotStartedDelayed(WorksheetFunction.CountA(NotStartedDelayed) - 1) = Range("A" & CurrentRow).Value
            Case "InProgress"
                If (Not Not InProgress) = 0 Then
                    ReDim InProgress(0)
                Else
                    ReDim Preserve InProgress(WorksheetFunction.CountA(InProgress))
                End If
                InProgress(UBound(InProgress)) = Range("A" & CurrentRow).Value
            Case "Overdue"
                If (Not Not Overdue) = 0 Then
                    ReDim Overdue(0)
                Else
                    ReDim Preserve Overdue(WorksheetFunction.CountA(Overdue))
                End If
                Overdue(UBound(Overdue)) = Range("A" & CurrentRow).Value
            Case "Completed"
                If (Not Not Completed) = 0 Then
                    ReDim Completed(0)
                Else
                    ReDim Preserve Completed(0 To WorksheetFunction.CountA(Completed))
                End If
                Completed(UBound(Completed)) = Range("A" & CurrentRow).Value
            Case "CompletedLate"
                If (Not Not CompletedLate) = 0 Then
                    ReDim CompletedLate(0)
                Else
                    ReDim Preserve CompletedLate(WorksheetFunction.CountA(CompletedLate))
                End If
                CompletedLate(UBound(CompletedLate)) = Range("A" & CurrentRow).Value
            Case "UnForeseenError"
        End Select
       ' Range("H" & CurrentRow).Value = IdentifyTaskStatus(Range("C" & CurrentRow), Range("D" & CurrentRow), Range("E" & CurrentRow), Range("F" & CurrentRow))
    Next

End Sub

Function IdentifyTaskStatus(EStart As Variant, EComplete As Variant, AStart As Variant, AComplete As Variant) As String
'   Return value base on status
'   NotStarted -        Not started(Not delayed) - Expected Start Date > Curr Date & Actual Start Date = ""
'   NotStartedDelayed - Not started(Delayed) - Expected Start Date <= Curr Date & Actual Start Date = ""
'   InProgress -        In Progress On Time Expected Complete Date >= Curr Date & Actual Complete Date = ""
'   Overdue -           Over Due - Expected Complete Date < Curr Date & Actual Complete Date = ""
'   Completed -         Completed(On Time) - Actual Complete Date <= Expected Complete Date
'   CompletedLate -     Completed(late) - Actual Complete Date > Expected Complete Date
'   UnForeseenError -   Error UnForeseen condition
    
    Dim CurrentDate As Date
    

    CurrentDate = Date
    If (Not IsDate(AStart)) Then
        If (EStart > CurrentDate) Then
            IdentifyTaskStatus = "NotStarted"
        Else
            IdentifyTaskStatus = "NotStartedDelayed"
        End If
    ElseIf (Not IsDate(AComplete)) Then
        If (EComplete >= CurrentDate) Then
            IdentifyTaskStatus = "InProgress"
        Else
            IdentifyTaskStatus = "Overdue"
        End If
    ElseIf IsDate(AComplete) Then
        If (AComplete <= EComplete) Then
            IdentifyTaskStatus = "Completed"
        Else
            IdentifyTaskStatus = "CompletedLate"
        End If
    Else
        IdentifyTaskStatus = "UnForeseenError"
    End If
    
End Function